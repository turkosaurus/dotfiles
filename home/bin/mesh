#!/usr/bin/env bash

function usage() {
	echo "usage: $0 <ip>"
	echo
	echo "Options:"
	echo "  -h, --help	Show this help message"
	echo "  -l, --local	Use local (192.168.0.0/16) IP, not public."
	echo
}

while [ $# -gt 0 ]; do
	# TODO: weird spacing
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -l|--local)
            LOCAL=1
            ;;
        --)
            shift
            break
            ;;
        -*)
            echo "Unknown option: $1" >&2
            usage
            exit 1
            ;;
        *)
            break
            ;;
    esac
    shift
done


# Require root.
if [[ $EUID -ne 0 ]]; then
	echo "error: root required"
	usage
	exit 1
fi

# Usage.
if [[ -z "$1" ]]; then
	usage
	exit 1
fi
IP_PRIVATE="$1"

### VARIABLES ###

HOSTNAME=$(hostname)
PORT=51820
WG_DIR="/etc/wireguard"
REGISTRY_PATH="registry.psv" # pipe separated value TODO: use git? db?

# Create private and public keys in WG_DIR if not exists.
if [[ ! -f "$WG_DIR/privatekey" || ! -f "$WG_DIR/publickey" ]]; then
	mkdir -p "$WG_DIR"
	wg genkey | tee "$WG_DIR/privatekey" | wg pubkey > "$WG_DIR/"
	echo "generated keys: $WG_DIR"
else
	echo "wg keys exist: $WG_DIR"
fi
KEY_PRIVATE=$(cat "$WG_DIR"/privatekey)
KEY_PUBLIC=$(cat "$WG_DIR"/publickey)

# Use public IP address by default,
# use 192.168.0.0/16 when -l (local) is set.
if [[ -n "$LOCAL" ]]; then
	IP_PUBLIC=$(ip -4 addr show | awk '/inet 192\.168\./ {print $2}' | cut -d/ -f1)
	echo "ip (local): $IP_PUBLIC"
else
	IP_PUBLIC=$(curl -s ifconfig.me)
	echo "ip (public): $IP_PUBLIC"
fi

### FUNCTIONS ###

# FIXME: does nothing
# TODO: use this to increment the IP address for each peer.
function registry_pull() {
	echo "registry pull..."
	if [[ ! -f $REGISTRY_PATH ]]; then
		echo "created: $REGISTRY_PATH"
		touch $REGISTRY_PATH
	fi
	# list all peers, but exclude self
	grep -v "^$HOSTNAME|" $REGISTRY_PATH \
		| while IFS='|' read -r name ip_external ip_internal key_pub; do
		echo "peer: $name|$ip_external|$ip_internal|$key_pub"
		current=$(echo "$ip_internal" | cut -d. -f4)
		echo "  current: $current"
		echo "  next: $((current + 1))"
	done
}

# Create a new Wireguard config, sarting with self,
# then adding all peers.
function config() {
cat <<EOF > "$WG_DIR/wg0.conf"
[Interface]
PrivateKey = $KEY_PRIVATE
Address = $IP_PRIVATE/16
ListenPort = $PORT

EOF

grep -v "^$HOSTNAME|" "$REGISTRY_PATH" > /tmp/registry_filtered
while IFS='|' read -r name ip_pub ip_priv key_pub; do
    echo "peer: $name|$ip_pub|$ip_priv|$key_pub"
    cat <<EOF >> "$WG_DIR/wg0.conf"
[Peer]
PublicKey = $key_pub
AllowedIPs = $ip_priv/16
Endpoint = $ip_pub:$PORT

EOF
done < /tmp/registry_filtered
rm /tmp/registry_filtered

chmod 600 "$WG_DIR/wg0.conf"
}

# TODO: use registry for etc/hosts
function registry_push() {
	echo "registry push..."
	if [[ ! -f $REGISTRY_PATH ]]; then
		touch $REGISTRY_PATH
	fi
	DATA="$HOSTNAME|$IP_PUBLIC|$IP_PRIVATE|$KEY_PUBLIC"
	echo "self: $DATA"
	if ! grep -q "^$HOSTNAME|" $REGISTRY_PATH; then
		echo "$DATA" >> $REGISTRY_PATH
		echo "added: $DATA"
	else
		sed -i "s/^$HOSTNAME|.*/$DATA/" $REGISTRY_PATH
		echo "updated: $DATA"
	fi
}

function known_hosts() {
    echo "known hosts..."
    if [[ ! -f $REGISTRY_PATH ]]; then
        echo "error: file not found: $REGISTRY_PATH"
        return 1
    fi
    sudo cp /etc/hosts /etc/hosts.bak # backup

    grep -v "^$HOSTNAME|" "$REGISTRY_PATH" | while IFS='|' read -r name _ ip_int key_pub; do
        sudo sed -i "/$name/d" /etc/hosts
        echo "$ip_int $name" | sudo tee -a /etc/hosts
    done
}
### EXECUTION ###

# pull peers
registry_pull

# write self info to registry
registry_push 

# write new wireguard config
config

known_hosts # TODO: put this behind a flag

# start
sudo wg-quick up /etc/wireguard/wg0.conf
sudo systemctl enable wg-quick@wg0
